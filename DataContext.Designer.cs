//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 24-03-2023 11:06:26
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace SqlAuthenticationContext
{

    [DatabaseAttribute(Name = "SqlAuthentication")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class SqlAuthenticationDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(SqlAuthenticationDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertLoginTable(LoginTable instance);
        partial void UpdateLoginTable(LoginTable instance);
        partial void DeleteLoginTable(LoginTable instance);
        partial void InsertUserTable(UserTable instance);
        partial void UpdateUserTable(UserTable instance);
        partial void DeleteUserTable(UserTable instance);

        #endregion

        public SqlAuthenticationDataContext() :
        base(@"Data Source=DESKTOP-BVHJ40C;Initial Catalog=SqlAuthentication;Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public SqlAuthenticationDataContext(MappingSource mappingSource) :
        base(@"Data Source=DESKTOP-BVHJ40C;Initial Catalog=SqlAuthentication;Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public SqlAuthenticationDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public SqlAuthenticationDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public SqlAuthenticationDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public SqlAuthenticationDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<LoginTable> LoginTables
        {
            get
            {
                return this.GetTable<LoginTable>();
            }
        }

        public Devart.Data.Linq.Table<UserTable> UserTables
        {
            get
            {
                return this.GetTable<UserTable>();
            }
        }
    }
}

namespace SqlAuthenticationContext
{

    /// <summary>
    /// There are no comments for SqlAuthenticationContext.LoginTable in the schema.
    /// </summary>
    [Table(Name = @"dbo.LoginTable")]
    public partial class LoginTable : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PwdId;

        private string _PwdName;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPwdIdChanging(int value);
        partial void OnPwdIdChanged();
        partial void OnPwdNameChanging(string value);
        partial void OnPwdNameChanged();
        #endregion

        public LoginTable()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PwdId in the schema.
        /// </summary>
        [Column(Storage = "_PwdId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int PwdId
        {
            get
            {
                return this._PwdId;
            }
            set
            {
                if (this._PwdId != value)
                {
                    this.OnPwdIdChanging(value);
                    this.SendPropertyChanging("PwdId");
                    this._PwdId = value;
                    this.SendPropertyChanged("PwdId");
                    this.OnPwdIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PwdName in the schema.
        /// </summary>
        [Column(Storage = "_PwdName", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string PwdName
        {
            get
            {
                return this._PwdName;
            }
            set
            {
                if (this._PwdName != value)
                {
                    this.OnPwdNameChanging(value);
                    this.SendPropertyChanging("PwdName");
                    this._PwdName = value;
                    this.SendPropertyChanged("PwdName");
                    this.OnPwdNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for SqlAuthenticationContext.UserTable in the schema.
    /// </summary>
    [Table(Name = @"dbo.UserTable")]
    public partial class UserTable : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserId;

        private string _UserName;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        #endregion

        public UserTable()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Storage = "_UserName", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging("UserName");
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
